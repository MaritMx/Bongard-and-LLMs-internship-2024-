###### Version 1

# import openai
# import os
# import base64

# def query_model(api_key, image_path, question):
#     # Load the image and encode it to base64
#     with open(image_path, "rb") as image_file:
#         image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
    
#     # Prepare the prompt with the image and question
#     prompt = f"You receive two sets of 6 figures in this image. Set A is a 2 by 3 grid on the left, set B is a 2 by 3 grid on the right. These sets of figures are differentiated from each other by a rule. What is the rule that separates the two sets? \n\nThe image: {image_base64}"
    
#     # Initialize the client with your API key
#     openai.api_key = api_key
    
#     # Query the model (Assuming using GPT or similar for analysis; modify as necessary)
#     response = openai.Completion.create(
#         model="gpt-4",  # Update model identifier as needed
#         messages=[
#             {"role": "system", "content": "You are a model that can analyze images and explain content."},
#             {"role": "user", "content": prompt}
#         ]
#     )
    
#     # Print or return the response from the model
#     return response.choices[0].message['content']

# def process_folder(api_key, folder_path, question):
#     # List all files in the folder
#     for file_name in os.listdir(folder_path):
#         # Construct full file path
#         file_path = os.path.join(folder_path, file_name)
#         # Check if the file is an image (you can add more file types if necessary)
#         if file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
#             print(f"Processing image: {file_name}")
#             response = query_model(api_key, file_path, question)
#             print(f"Response for {file_name}:\n{response}\n")

# # Example usage
# api_key = "your-real-api-key"
# folder_path = 'C:\\Users\\Marit\\Downloads\\Documenten UvA\\ResMas\\Internship\\Bongard problems\\Variations\\Test_api_script'
# question = "You receive two sets of 6 figures in image 1. Set A is a 2 by 3 grid on the left, set B is a 2 by 3 grid on the right. These sets of figures are differentiated from each other by a rule. What is the rule that separates the two sets?"
# process_folder(api_key, folder_path, question)



###### Version 2

# import openai
# import os
# import base64
# import pandas as pd

# def query_model(api_key, image_path, question):
#     # Load the image and encode it to base64
#     with open(image_path, "rb") as image_file:
#         image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
    
#     # Prepare the prompt with the image and question
#     prompt = f"You receive two sets of 6 figures in this image. Set A is a 2 by 3 grid on the left, set B is a 2 by 3 grid on the right. These sets of figures are differentiated from each other by a rule. What is the rule that separates the two sets? \n\nThe image: {image_base64}"
    
#     # Initialize the client with your API key
#     openai.api_key = api_key
    
#     # Query the model using the updated API
#     response = openai.chat.completions.create(
#         model="gpt-4-turbo-2024-04-09",
#         prompt=prompt,
#         max_tokens=150  # Adjust as needed
#     )
    
#     # Return the response from the model
#     return response.choices[0].text

# def process_folder(api_key, folder_path, question, output_excel):
#     # Create a DataFrame to store the responses
#     df = pd.DataFrame(columns=['GPT-4'])
    
#     # List all files in the folder
#     for file_name in os.listdir(folder_path):
#         # Construct full file path
#         file_path = os.path.join(folder_path, file_name)
#         # Check if the file is an image
#         if file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
#             print(f"Processing image: {file_name}")
#             response = query_model(api_key, file_path, question)
#             # Append the response to the DataFrame
#             df.loc[file_name] = [response]
    
#     # Save the DataFrame to an Excel file
#     df.to_excel(output_excel, index_label='Image Name')

# # Example usage
# api_key = "your-real-api-key"
# folder_path = 'C:\\Users\\Marit\\Downloads\\Documenten UvA\\ResMas\\Internship\\Bongard problems\\Variations\\Test_api_script'
# question = "You receive two sets of 6 figures in this image. Set A is a 2 by 3 grid on the left, set B is a 2 by 3 grid on the right. These sets of figures are differentiated from each other by a rule. What is the rule that separates the two sets?"
# output_excel = 'Model_Responses.xlsx'
# process_folder(api_key, folder_path, question, output_excel)





##### Version 3
import openai
import os
import base64
import pandas as pd

def query_model(api_key, image_path, question):
    # Load the image and encode it to base64
    with open(image_path, "rb") as image_file:
        image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
    
    # Prepare the messages with the question and image
    messages = [
        {
            "role": "system",
            "content": "You are a model that can analyze images and explain content."
        },
        {
            "role": "user",
            "content": f"You receive two sets of 6 figures in this image. Set A is a 2 by 3 grid on the left, set B is a 2 by 3 grid on the right. These sets of figures are differentiated from each other by a rule. What is the rule that separates the two sets? The image data is as follows: {image_base64}"
        }
    ]
    
    # Initialize the client with your API key
    openai.api_key = api_key
    
    # Query the model using the updated API
    response = openai.chat.completions.create(
        model = "gpt-4-vision-preview",
        messages = messages,
        max_tokens = 300,  # Adjust as needed 
        temperature = 0
    )
    
    # Return the response from the model
    return response.choices[0].message['content']  # Adjust accessing the response according to the actual output structure

def process_folder(api_key, folder_path, question, output_excel):
    # Create a DataFrame to store the responses
    df = pd.DataFrame(columns=['GPT-4'])
    
    # List all files in the folder
    for file_name in os.listdir(folder_path):
        # Construct full file path
        file_path = os.path.join(folder_path, file_name)
        # Check if the file is an image
        if file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
            print(f"Processing image: {file_name}")
            response = query_model(api_key, file_path, question)
            # Append the response to the DataFrame
            df.loc[file_name] = [response]
    
    # Save the DataFrame to an Excel file
    df.to_excel(output_excel, index_label='Image Name')

# Example usage
api_key = "your-real-api-key"  # Replace 'your-real-api-key' with the actual API key
folder_path = "C:\\Users\\Marit\\Downloads\\Documenten UvA\\ResMas\\Internship\\Bongard problems\\Variations\\Test_api_script"
question = "You receive two sets of 6 figures in this image. Set A is a 2 by 3 grid on the left, set B is a 2 by 3 grid on the right. These sets of figures are differentiated from each other by a rule. What is the rule that separates the two sets?"
output_excel = 'Model_Responses.xlsx'
process_folder(api_key, folder_path, question, output_excel)
